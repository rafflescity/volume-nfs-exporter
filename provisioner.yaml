apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: volume-nfs-provisoner
  labels:
    app: volume-nfs-provisoner
spec:
  replicas: 1
  serviceName: volume-nfs-provisoner
  selector:
    matchLabels:
      app: volume-nfs-provisoner
  template:
    metadata:
      labels:
        app: volume-nfs-provisoner
    spec:
      serviceAccount: volume-nfs-provisioner
      restartPolicy: Always
      terminationGracePeriodSeconds: 0
      containers:
      - name: provisioner
        image: daocloud.io/piraeus/volume-nfs-provisioner
        imagePullPolicy: Always
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          limits:
            cpu: '500m'
            memory: '500Mi'
        args: [ -name=nfs.volume.io ]
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: volume-nfs-provisioner
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: volume-nfs-provisioner
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: volume-nfs-provisioner
subjects:
  - kind: ServiceAccount
    name: volume-nfs-provisioner
    namespace: default
roleRef:
  kind: ClusterRole
  name: volume-nfs-provisioner
  apiGroup: rbac.authorization.k8s.io
# ---
# kind: ClusterRole
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: volume-nfs-provisioner
# rules:
#   - apiGroups: [""]
#     resources: ["persistentvolumes"]
#     verbs: ["get", "list", "watch", "create", "delete"]
#   - apiGroups: [""]
#     resources: ["persistentvolumeclaims"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: ["storage.k8s.io"]
#     resources: ["storageclasses"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: [""]
#     resources: ["events"]
#     verbs: ["create", "update", "patch"]
# ---
# kind: ClusterRoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: volume-nfs-provisioner
# subjects:
#   - kind: ServiceAccount
#     name: volume-nfs-provisioner
#     namespace: default
# roleRef:
#   kind: ClusterRole
#   name: volume-nfs-provisioner
#   apiGroup: rbac.authorization.k8s.io
# ---
# kind: Role
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: leader-locking-volume-nfs-provisioner
# rules:
#   - apiGroups: [""]
#     resources: ["endpoints"]
#     verbs: ["get", "update", "patch"]
#   - apiGroups: [""]
#     resources: ["endpoints"]
#     verbs: ["list", "watch", "create"]
#   - apiGroups: ["coordination.k8s.io"]
#     resources: ["leases"]
#     verbs: ["*"]
# ---
# kind: RoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: leader-locking-volume-nfs-provisioner
# subjects:
#   - kind: ServiceAccount
#     name: volume-nfs-provisioner
#     namespace: default
# roleRef:
#   kind: Role
#   name: leader-locking-volume-nfs-provisioner
#   apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: volume-nfs-provisoner
  labels:
    app: volume-nfs-provisioner
spec:
  clusterIP: None
  selector:
    app: volume-nfs-provisioner